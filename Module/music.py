from __future__ import annotations

import asyncio
from datetime import timedelta, datetime

from disnake.ext import commands
from utils.ClientUser import ClientUser
from disnake import Embed, ApplicationCommandInteraction, Option, MessageFlags, SelectOption, utils, OptionType, OptionChoice, InteractionNotEditable, AppCmdInter, Interaction, Member, VoiceState, MessageInteraction
from mafic import Track, Playlist, TrackEndEvent, EndReason, Timescale, Filter, SearchType
from musicCore.player import MusicPlayer, LOADFAILED, QueueInterface, VolumeInteraction, SelectInteraction, STATE
from musicCore.check import check_voice, has_player
from utils.conv import trim_text, time_format, string_to_seconds, percentage, music_source_image, URLREGEX, YOUTUBE_VIDEO_REG, LoopMODE
from re import match
from utils.error import GenericError, NoPlayer, DiffVoice

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot: ClientUser = bot

    search_list = {
        "youtube": SearchType.YOUTUBE,
        "youtube music": SearchType.YOUTUBE_MUSIC,
        "soundcloud": SearchType.SOUNDCLOUD,
        "spotify": SearchType.SPOTIFY_SEARCH,
        "applemusic": SearchType.APPLE_MUSIC
    }
    SEARCH_LIST_AUTOCOMPLETE = ["Youtube", "Youtube Music", "SoundCloud", "Spotify", "AppleMusic"]

    @check_voice()
    @commands.command(name="play", description="Ch∆°i m·ªôt b√†i h√°t", aliases=["p"])
    async def play_legacy(self, inter: ApplicationCommandInteraction, *, search: str):
        await self.play.callback(self=self, inter=inter, search=search)

    @check_voice()
    @commands.slash_command(name="play", description="Ch∆°i m·ªôt b·∫£n nh·∫°c", options=[
        Option(name="search",
               description="T√¨m ki·∫øm b√†i h√°t b·∫±ng t√™n ho·∫∑c url",
               required=True), 
        Option(name="source", description="Source ƒë·ªÉ t√¨m ki·∫øm b√†i h√°t", required=False)])
    async def play(self, inter: ApplicationCommandInteraction, search: str, source = None):
        try:
            await inter.response.defer(ephemeral=True)
        except AttributeError:
            pass
        
        if match(YOUTUBE_VIDEO_REG, search) and not self.bot.env.get("PLAY_YOUTUBE_SOURCE", default=True):
            raise GenericError("Hi·ªán t·∫°i c√°c link youtube kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t...")
        
            
        if self.bot.available_nodes.__len__() == 0:
            raise GenericError("Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c kh·∫£ d·ª•ng")

        player: MusicPlayer = inter.author.guild.voice_client
        begined = player

        if player is None:
            player: MusicPlayer = await inter.author.voice.channel.connect(cls=MusicPlayer)

        player.NotiChannel = inter.channel

        if source is not None:
            search_type = self.search_list.get(source.lower())
        else:
            if not self.bot.env.get("PLAY_YOUTUBE_SOURCE", default=True):
                search_type = SearchType.SOUNDCLOUD
            else: 
                search_type = SearchType.YOUTUBE

        try:
            result = await player.fetch_tracks(search, search_type=search_type)

            if isinstance(result, Playlist):
                    view = SelectInteraction(
                    options=[SelectOption(label="B√†i h√°t", emoji="üéµ",
                                                   description="Ch·ªâ t·∫£i l√™n b√†i h√°t t·ª´ li√™n k·∫øt.", value="music"),
                    SelectOption(label="Playlist", emoji="üé∂",
                                                   description="T·∫£i danh s√°ch b√†i h√°t hi·ªán t·∫°i, kh√¥ng g·ª£i √Ω khi s·ª≠ d·ª•ng v·ªõi danh s√°ch do youtube t·∫°o ra.", value="playlist")], timeout=30)
                    embed = Embed(
                        description='**Li√™n k·∫øt ch·ª©a video c√≥ danh s√°ch ph√°t.**\n'
                                    f'Ch·ªçn m·ªôt t√πy ch·ªçn trong <t:{int((utils.utcnow() + timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                    )

                    msg = await inter.send(embed=embed, view=view, flags=MessageFlags(suppress_notifications=True))

                    await view.wait()

                    if not view.inter or view.select == False:

                        try:
                            func = inter.edit_original_message
                        except AttributeError:
                            func = msg.edit

                        await func(
                            content=f"{'Thao t√°c ƒë√£ b·ªã h·ªßy' if view.select is not False else 'ƒê√£ h·∫øt th·ªùi gian ch·ªù'}" if view.select is not False else "ƒê√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng.",
                            embed=None, flags=MessageFlags(suppress_notifications=True)
                        )
                        await player.disconnect()
                        return

                    if view.select == "playlist":

                        total_time = 0
                        for track in result.tracks:
                            player.queue.add_next_track(track)
                            if not track.stream: total_time += track.length

                        thumbnail_track = result.tracks[0]
                        embed = Embed(
                            title=trim_text("[Playlist] " + thumbnail_track.title, 32),
                            url=thumbnail_track.uri,
                            color=0xFFFFFF
                        )
                        embed.set_author(name=result.tracks[0].source.capitalize(), icon_url=music_source_image(result.tracks[0].source.lower()))
                        embed.description = f"``{thumbnail_track.source.capitalize()} | {result.tracks.__len__()} b√†i h√°t | {time_format(total_time)}``"
                        embed.set_thumbnail(result.tracks[0].artwork_url)
                        # try:
                        #     await inter.edit_original_response(embed=embed, delete_after=5,view=None, flags=MessageFlags(suppress_notifications=True))
                        # except AttributeError:
                        #     await msg.edit(embed=embed, delete_after=5, view=None, flags=MessageFlags(suppress_notifications=True))
                    else:
                        track: Track = result.tracks[0]
                        player.queue.add_next_track(track)
                        embed =  Embed(
                            title=trim_text(track.title, 32),
                            url=track.uri,
                            color=0xFFFFFF
                        )
                        embed.set_author(name=track.source.capitalize(), icon_url=music_source_image(track.source.lower()))
                        embed.description = f"`{track.source.capitalize()} | {track.author}"
                        if track.stream:
                            embed.description += " | üî¥ LIVESTREAM`"
                        else:
                            embed.description += f" | {time_format(track.length)}`"
                        embed.set_thumbnail(track.artwork_url)
                        try:
                            await inter.edit_original_response(embed=embed, delete_after=5, view=None, flags=MessageFlags(suppress_notifications=True))
                        except AttributeError:
                            await msg.edit(embed=embed, delete_after=5, view=None, flags=MessageFlags(suppress_notifications=True))

            elif isinstance(result, list):
                track: Track = result[0]
                player.queue.add_next_track(track)
                embed =  Embed(
                    title=trim_text(track.title, 32),
                    url=track.uri,
                    color=0xFFFFFF
                )
                embed.set_author(name=track.source.capitalize(), icon_url=music_source_image(track.source.lower()))
                embed.description = f"`{track.source.capitalize()} | {track.author}"
                if track.stream:
                    embed.description += " | üî¥ LIVESTREAM`"
                else:
                    embed.description += f" | {time_format(track.length)}`"
                embed.set_thumbnail(track.artwork_url)
            else:
                embed = LOADFAILED
        except:
            embed = LOADFAILED
            self.bot.logger.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t: {search} (ID m√°y ch·ªß: {inter.guild.id})")
            await player.stopPlayer()
        try:
            await inter.edit_original_response(embed=embed)
        except ( InteractionNotEditable, AttributeError):
            await inter.send(embed=embed, flags=MessageFlags(suppress_notifications=True), delete_after=15)
            if match(URLREGEX, search):
                await asyncio.sleep(1)
                await inter.message.edit(suppress_embeds=True, allowed_mentions=False)

        if embed == LOADFAILED:
            return await player.stopPlayer()

        if not begined:
            await player.process_next()
            player.update_controller_task = self.bot.loop.create_task(player.update_controller())
            self.bot.logger.info(f"Tr√¨nh ph√°t ƒë∆∞·ª£c kh·ªüi t·∫°o t·∫°i m√°y ch·ªß {inter.guild.id}")
        else:
            await player.controller()

    @play.autocomplete("source")
    async def source_autocomplete(self, inter: Interaction, query: str):
        if query:
            return [sc for sc in self.SEARCH_LIST_AUTOCOMPLETE if query.lower() in sc]
        
        return [sc for sc in self.SEARCH_LIST_AUTOCOMPLETE]

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def stop_legacy(self, inter:  AppCmdInter):
        player: MusicPlayer = inter.author.guild.voice_client
        if player.queue.autoplay.__len__() != 0:
            player.queue.autoplay.clear()
        await player.stopPlayer()
        await player.destroy_player_controller()
        await inter.send(
            embed=Embed(
                title="‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c",
                color=0x00FFFF
            ), flags=MessageFlags(suppress_notifications=True)
        )
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.slash_command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def stop(self, ctx: ApplicationCommandInteraction):
        await ctx.response.defer()
        player: MusicPlayer = ctx.author.guild.voice_client
        if player.queue.autoplay.__len__() != 0:
            player.queue.autoplay.clear()
        await player.stopPlayer()
        await player.destroy_player_controller()
        await ctx.edit_original_response(
                embed=Embed(
                    title="‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c",
                    color=0x00FFFF
                ), flags=MessageFlags(suppress_notifications=True)
            )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def pause_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        if player.paused:
            await inter.send("Tr√¨nh ph√°t ƒë√£ b·ªã t·∫°m d·ª´ng r·ªìi", flags=MessageFlags(suppress_notifications=True))
            return
        await player.pause()
        await inter.send(f"ƒê√£ t·∫°m d·ª´ng b√†i h√°t", flags=MessageFlags(suppress_notifications=True))
        await player.controller()

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def pause(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        if player.paused:
            await inter.edit_original_response("Tr√¨nh ph√°t ƒë√£ b·ªã t·∫°m d·ª´ng r·ªìi", flags=MessageFlags(suppress_notifications=True))
            return
        await player.pause()
        await inter.edit_original_response(f"ƒê√£ t·∫°m d·ª´ng b√†i h√°t", flags=MessageFlags(suppress_notifications=True))
        await player.controller()

    @commands.slash_command(name="autoplay",description="Ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t (B·∫≠t / T·∫Øt)")
    @has_player()
    @check_voice()
    async def autoplaymode(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.is_autoplay_mode = not player.is_autoplay_mode
        if not player.is_autoplay_mode and player.queue.autoplay.__len__() != 0:
            player.queue.autoplay.clear()
        await inter.edit_original_response(f"ƒê√£ {'k√≠ch ho·∫°t' if player.is_autoplay_mode else 'v√¥ hi·ªáu h√≥a'} ch·∫ø ƒë·ªô t·ª± ƒë·ªông th√™m b√†i h√°t", flags=MessageFlags(suppress_notifications=True))

    @commands.command(name="autoplay",description="Ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t (B·∫≠t / T·∫Øt)", aliases=["ap"])
    @has_player()
    @check_voice()
    async def autoplay(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.is_autoplay_mode = not player.is_autoplay_mode
        if not player.is_autoplay_mode and player.queue.autoplay:
            player.queue.autoplay.clear()
        await inter.send(f"ƒê√£ {'k√≠ch ho·∫°t' if player.is_autoplay_mode else 'v√¥ hi·ªáu h√≥a'} ch·∫ø ƒë·ªô t·ª± ƒë·ªông th√™m b√†i h√°t", flags=MessageFlags(suppress_notifications=True))
        await player.controller()

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="resume", description="Ti·∫øp t·ª•c ph√°t b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def resume_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        if not player.paused:
            await inter.send("Tr√¨nh ph√°t kh√¥ng b·ªã t·∫°m d·ª´ng", flags=MessageFlags(suppress_notifications=True))
            return
        await player.resume()
        player.start_time = datetime.now()
        await inter.send("ƒê√£ ti·∫øp t·ª•c ph√°t", flags=MessageFlags(suppress_notifications=True))

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="resume", description="Ti·∫øp t·ª•c ph√°t b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def resume(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        if not player.paused:
            await inter.edit_original_response("Tr√¨nh ph√°t kh√¥ng b·ªã t·∫°m d·ª´ng", flags=MessageFlags(suppress_notifications=True))
            return
        await player.resume()
        player.start_time = datetime.now()
        await inter.edit_original_response("ƒê√£ ti·∫øp t·ª•c ph√°t", flags=MessageFlags(suppress_notifications=True))

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="next", description="Ph√°t b√†i h√°t ti·∫øp theo")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def next_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        await player.playnext()
        await inter.send(
            embed=Embed(
                title="‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo",
                color=0x00FFFF
            ), flags=MessageFlags(suppress_notifications=True)
        )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="next", description="Ph√°t b√†i h√°t ti·∫øp theo")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def next(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        if not player.queue.next_track:
            return await inter.edit_original_response("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang trong h√†ng ƒë·ª£i", flags=MessageFlags(suppress_notifications=True))
        await player.playnext()
        await inter.edit_original_response(
            embed=Embed(
                title="‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo",
                color=0x00FFFF
            ), flags=MessageFlags(suppress_notifications=True)
        )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="previous", aliases = ["back", "b"],description="Ph√°t l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥")
    async def prev(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        result = await player.playprevious()
        if result:
            await inter.send(
                embed=Embed(
                    title="‚èÆÔ∏è ƒê√£ quay l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥",
                    color=0x00FFFF
                ), flags=MessageFlags(suppress_notifications=True)
            )
        else:
            await inter.send(
                embed=Embed(
                    title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
                    color=0xFFFF00
                ), flags=MessageFlags(suppress_notifications=True)
            )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="previous", description="Ph√°t l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥")
    async def prev(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        result = await player.playprevious()
        if result:
            await inter.edit_original_response(
                embed=Embed(
                    title="‚èÆÔ∏è ƒê√£ quay l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥",
                    color=0x00FFFF
                ), flags=MessageFlags(suppress_notifications=True)
            )
        else:
            await inter.edit_original_response(
                embed=Embed(
                    title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
                    color=0xFFFF00
                ), flags=MessageFlags(suppress_notifications=True)
            )

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="queue", description="Hi·ªÉn th·ªã danh s√°ch ch·ªù")
    async def show_queue(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        if not player.queue.next_track:
            return await inter.edit_original_response("Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i", flags=MessageFlags(suppress_notifications=True))

        view = QueueInterface(player=player)
        embed = view.embed

        kwargs = {
            "embed": embed,
            "view": view
        }
        try:
            func = inter.followup.send
            kwargs["ephemeral"] = True
        except AttributeError:
            func = inter.send
            kwargs["ephemeral"] = True

        view.message = await func(**kwargs)

        await view.wait()

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="clear_queue", description="Xo√° danh s√°ch ch·ªù")
    async def clear_queue_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.queue.clear_queue()
        await inter.send(embed=Embed(
            title="‚úÖ ƒê√£ xo√° t·∫•t c·∫£ b√†i h√°t trong danh s√°ch ch·ªù",
            color=0x00FF00
        ), flags=MessageFlags(suppress_notifications=True))

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="clear_queue", description="Xo√° danh s√°ch ch·ªù")
    async def clear_queue(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.queue.clear_queue()
        await inter.edit_original_response(embed=Embed(
            title="‚úÖ ƒê√£ xo√° t·∫•t c·∫£ b√†i h√°t trong danh s√°ch ch·ªù",
            color=0x00FF00
        ), flags=MessageFlags(suppress_notifications=True))

    @has_player()
    @check_voice()
    @commands.slash_command(name="loopmode",
    description="Ph√°t li√™n t·ª•c b√†i h√°t hi·ªán t·∫°i ho·∫∑c to√†n b·ªô danh s√°ch ph√°t",
    options=[
         Option(
            name="mode",
            description="Ch·∫ø ƒë·ªô",
            type= OptionType.integer,
            choices=[
                 OptionChoice(name="T·∫Øt", value=LoopMODE.OFF),
                 OptionChoice(name="B√†i h√°t hi·ªán t·∫°i", value=LoopMODE.SONG),
                 OptionChoice(name="To√†n b·ªô danh s√°ch ph√°t", value=LoopMODE.PLAYLIST)
            ],
            min_value=0,
            max_length=0,
            required=True
        )
    ]
    )
    async def loop_mode(self, inter: ApplicationCommandInteraction, mode = LoopMODE.OFF):
        player: MusicPlayer = inter.author.guild.voice_client
        if mode not in (LoopMODE.OFF, LoopMODE.SONG, LoopMODE.PLAYLIST):
            await inter.send(embed= Embed(
                title="‚ùå Gi√° tr·ªã nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá",
                color=0xFF0000
            ), flags=MessageFlags(suppress_notifications=True))
            return
        player.queue.loop = mode
        await inter.send(embed= Embed(
            title="‚úÖ ƒê√£ thay ƒë·ªïi ch·∫ø ƒë·ªô ph√°t li√™n t·ª•c",
            color=0x00FF00
        ), flags=MessageFlags(suppress_notifications=True))

    @commands.cooldown(1, 30, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="247", description="B·∫≠t / T·∫Øt ch·∫ø ƒë·ªô ph√°t kh√¥ng d·ª´ng",
                            options=[Option(name="state", description="Ch·ªçn (t·∫Øt / b·∫≠t)", 
                                            choices=[OptionChoice(name="T·∫Øt", value=STATE.OFF), OptionChoice(name="B·∫≠t", value=STATE.ON)], 
                                            required=True, 
                                            min_value=1, 
                                            max_value=1, type=OptionType.integer)])
    async def keep_connected(self, inter: ApplicationCommandInteraction, state = STATE.OFF):
        player: MusicPlayer = inter.author.guild.voice_client
        if player.queue.keep_connect == state: 
            return inter.send(f"T√≠nh nƒÉng n√†y ƒë√£ {'b·∫≠t' if state == STATE.ON else 't·∫Øt'} r·ªìi", flags=MessageFlags(suppress_notifications=True))
        player.queue.keep_connect = state
        player.keep_connection = state
        await inter.send(embed=Embed(title=f"‚úî ƒê√£ {'b·∫≠t' if state == STATE.ON else 't·∫Øt'} ch·∫ø ƒë·ªô ph√°t kh√¥ng d·ª´ng", color=0xffddff), flags=MessageFlags(suppress_notifications=True))
        await player.controller()

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng", aliases=["vol", "v"])
    async def volume_legacy(self, inter: ApplicationCommandInteraction, volume: int = 100):
        if not 4 < volume < 150:
            await inter.send("Ch·ªçn t·ª´ **5** ƒë·∫øn **150**", flags=MessageFlags(suppress_notifications=True))
            return

        await self.volume.callback(self=self, inter=inter, volume=int(volume))

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng b√†i h√°t", options=[Option(name="volume", description="Ch·ªçn t·ª´ 5 ƒë·∫øn 150", min_value=5.0, max_value=150.0)])
    async def volume(self, inter: ApplicationCommandInteraction, volume: int = None):
        player: MusicPlayer = inter.author.guild.voice_client
        embed = Embed()

        if volume is None:

            view = VolumeInteraction(inter)

            embed.description = "**Ch·ªçn m·ª©c √¢m l∆∞·ª£ng b√™n d∆∞·ªõi**"
            await inter.send(embed=embed, view=view, flags=MessageFlags(suppress_notifications=True))
            await view.wait()
            if view.volume is None:
                return
            volume = view.volume

        elif not 4 < volume < 100:
            await inter.send("Ch·ªçn t·ª´ **5** ƒë·∫øn **150**", flags=MessageFlags(suppress_notifications=True))
            return

        await player.set_volume(volume)
        await inter.edit_original_response(f"ƒê√£ ƒëi·ªÉu ch·ªânh √¢m l∆∞·ª£ng th√†nh {volume}%", flags=MessageFlags(suppress_notifications=True))

    @commands.cooldown(1, 30, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="seek", description="Tua b√†i h√°t ƒë·∫øn m·ªôt ƒëo·∫°n c·ª• th·ªÉ")
    async def seek(
            self,
            inter: ApplicationCommandInteraction,
            position: str = commands.Param(name="time", description="Th·ªùi gian ƒë·ªÉ ti·∫øn/tr·ªü l·∫°i (v√≠ d·ª•: 1:45 / 40 / 0:30)")
    ):
        player: MusicPlayer = inter.author.guild.voice_client
        if player.queue.is_playing.stream:
            raise GenericError("B·∫°n kh√¥ng th·ªÉ l√†m ƒëi·ªÅu n√†y trong m·ªôt bu·ªïi ph√°t tr·ª±c ti·∫øp")
        if not player.queue.is_playing.seekable:
            raise GenericError("B√†i h√°t n√†y kh√¥ng th·ªÉ tua")

        await inter.response.defer(ephemeral=True)

        position = position.split(" | ")[0].replace(" ", ":")

        seconds = string_to_seconds(position)

        if seconds is None:
            raise GenericError("**Gi√° tr·ªã kh√¥ng h·ª£p l·ªá!, S·ª≠ d·ª•ng gi√¢y (1 ho·∫∑c 2 ch·ªØ s·ªë) ho·∫∑c ·ªü ƒë·ªãnh d·∫°ng (ph√∫t):(gi√¢y)**")

        milliseconds = seconds * 1000

        if milliseconds < 0: milliseconds = 0

        if milliseconds > player.position:

            emoji = "‚è©"

            txt = f"{inter.author.mention} ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn: `{time_format(milliseconds)}`", \
                f"{emoji} **‚†Ç{inter.author.mention} tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn:** `{time_format(milliseconds)}`"


        else:

            emoji = "‚è™"

            txt = f"{inter.author.mention} ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i: `{time_format(milliseconds)}`", \
                f"{emoji} **‚†Ç{inter.author.mention} ƒë∆∞a th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i:** `{time_format(milliseconds)}`"


        await player.seek(int(milliseconds))

        if player.paused:
            await player.resume()

        await inter.edit_original_response(embed= Embed(description=txt), flags=MessageFlags(suppress_notifications=True))

    @seek.autocomplete("time")
    async def seek_successtion(self, inter:  Interaction, query: str):
        try:
            if not inter.author.voice:
                return
        except AttributeError:
            return

        if query:
            return [time_format(string_to_seconds(query)*1000)]

        try:
            player: MusicPlayer = inter.author.guild.voice_client
        except AttributeError:
            return

        if not player.queue.is_playing or player.queue.is_playing.stream or not player.queue.is_playing.seekable:
            return

        seeks = []

        if player.queue.is_playing.length > 90000:
            times = [int(n * 0.5 * 10) for n in range(20)]
        else:
            times = [int(n * 1 * 10) for n in range(20)]

        for p in times:
            percent = percentage(p, player.queue.is_playing.length)
            seeks.append(f'{time_format(percent)} | {p}%')

        return seeks

    @commands.slash_command(name="nightcore", description="Ph√°t b√†i h√°t b·∫±ng filter nightcore")
    @commands.guild_only()
    @has_player()
    @check_voice()
    @commands.cooldown(1, 20, commands.BucketType.guild)
    async def nightcore(self, inter:  ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.nightCore = not player.nightCore

        if player.nightCore:
            await player.remove_filter(label="nightcore")
            txt = "t·∫Øt"
        else:
            nightCore_EQ_timeScale = Timescale(speed=1.1, pitch=1.2)
            nightCore_filter_timeScale = Filter(timescale=nightCore_EQ_timeScale)
            await player.add_filter(nightCore_filter_timeScale, label="nightcore")
            txt = "b·∫≠t"

        await inter.edit_original_response(embed= Embed(description=f"ƒê√£ {txt} t√≠nh nƒÉng nightcore\n -# T√≠nh nƒÉng n√†y ƒë·ªÉ tƒÉng √¢m s·∫Øc v√† t·ªëc ƒë·ªô cho b√†i h√°t"),
                                           flags=MessageFlags(suppress_notifications=True))

    @commands.Cog.listener()
    async def on_track_end(self, event: TrackEndEvent[MusicPlayer]):
        player = event.player
        reason = event.reason
        failed = 0
        if reason == EndReason.FINISHED:
            await player.process_next()
        elif reason == EndReason.LOAD_FAILED:
            failed += 1
            if failed >= 5:
                self.bot.available_nodes.remove(player.node)
                self.bot.unavailable_nodes.append(player.node)
                await self.bot.nodeClient.remove_node(player.node)
                failed = 0
                return
            await player.NotiChannel.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i b√†i h√°t", flags=MessageFlags(suppress_notifications=True))
            self.bot.logger.warning(f"T·∫£i b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu ·ªü m√°y ch·ªß {player.guild.id} th·∫•t b·∫°i: {reason}")
            if self.bot.available_nodes.__len__() == 0:
                return await player.stopPlayer()
            await player.process_next()

    @commands.Cog.listener("on_voice_state_update")
    async def player_eco_mode(self, member:  Member, before:  VoiceState, after:  VoiceState):
        if member.bot:
            return 
        vc = member.guild.me.voice

        if vc is None:
            return

        player: MusicPlayer = MusicPlayer(client=self.bot, channel=vc.channel)

        if not player:
            return
        if before.channel != after.channel:
            vc = player.guild.me.voice.channel
            check = any(m for m in vc.members if not m.bot and not (m.voice.deaf or m.voice.self_deaf))

            if check:
                return

            await asyncio.sleep(180)

            check = any(m for m in vc.members if not m.bot and not (m.voice.deaf or m.voice.self_deaf))

            if check:
                return
            
            if player.keep_connection == STATE.ON:
                return
            
            await player.stopPlayer()
            await player.sendMessage(content="Tr√¨nh ph√°t ƒë√£ b·ªã t·∫Øt ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n h·ªá th·ªëng", flags=MessageFlags(suppress_notifications=True))

    @commands.Cog.listener("on_button_click")
    async def process_player_interaction(self, interaction: MessageInteraction):
        if interaction.guild.id is None:
            return
        if interaction.user.bot:
            return
        customID = interaction.component.custom_id
        if not customID.startswith("player_controller"):
            return
        player: MusicPlayer = interaction.author.guild.voice_client

        if not player:
            raise NoPlayer()
        if not (interaction.author.voice and interaction.author.id in interaction.guild.me.voice.channel.voice_states):
            raise DiffVoice()
        match customID:
            case "player_controller_pause_resume_btn":
                await player.pause_player()
                await interaction.send("T∆∞∆°ng t√°c th√†nh c√¥ng", ephemeral=True)
                await player.controller()
            case "player_controller_prev_track_btn":
                await player.playprevious()
                await interaction.send("T∆∞∆°ng t√°c th√†nh c√¥ng", ephemeral=True)
            case "player_controller_stop_btn":
                await player.stopPlayer()
                await interaction.send("T∆∞∆°ng t√°c th√†nh c√¥ng", ephemeral=True)
            case "player_controller_next_track_btn":
                await player.process_next()
                await interaction.send("T∆∞∆°ng t√°c th√†nh c√¥ng", ephemeral=True)
            case _:
                raise GenericError("T∆∞∆°ng t√°c kh√¥ng h·ª£p l·ªá")

def setup(bot: ClientUser):
    bot.add_cog(Music(bot))