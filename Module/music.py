from disnake.ext import commands
from utils.ClientUser import ClientUser
from disnake import Embed, ApplicationCommandInteraction, Option
import disnake
from mafic import Track, Playlist, TrackEndEvent, EndReason
from musicCore.player import MusicPlayer, LOADFAILED, QueueInterface, LoopMODE, VolumeInteraction
from musicCore.check import check_voice, has_player
from utils.conv import trim_text, time_format, string_to_seconds, percentage, music_source_image
from utils.error import GenericError

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot: ClientUser = bot

    @check_voice()
    @commands.slash_command(name="play", description="Ch∆°i m·ªôt b·∫£n nh·∫°c", options=[
        Option(name="search",
               description="T√¨m ki·∫øm b√†i h√°t b·∫±ng t√™n ho·∫∑c url",
               required=True)])
    async def play(self, inter: disnake.ApplicationCommandInteraction, search: str):
        await inter.response.defer()

        player: MusicPlayer = inter.author.guild.voice_client
        begined = True

        if player is None:
            player: MusicPlayer = await inter.author.voice.channel.connect(cls=MusicPlayer)
            begined = False

        player.NotiChannel = inter.channel

        try:
            result = await player.fetch_tracks(search)
            if isinstance(result, Playlist):
                total_time = 0
                for track in result.tracks:
                    player.queue.add_next_track(track)
                    if not track.stream: total_time += track.length

                thumbnail_track = result.tracks[0]
                embed = disnake.Embed(
                    title=trim_text("[Playlist] " + thumbnail_track.title, 32),
                    url=thumbnail_track.uri,
                    color=0xFFFFFF
                )
                embed.set_author(name=result.tracks[0].source, icon_url=music_source_image(result.tracks[0].source.lower()))
                embed.description = f"``{thumbnail_track.source.capitalize()} | {result.tracks.__len__()} b√†i h√°t | {time_format(total_time)}``"
                embed.set_thumbnail(result.tracks[0].artwork_url)

            elif isinstance(result, list):
                track: Track = result[0]
                player.queue.add_next_track(track)
                embed = disnake.Embed(
                    title=trim_text(track.title, 32),
                    url=track.uri,
                    color=0xFFFFFF
                )
                embed.description = f"`{track.source.capitalize()} | {track.author}"
                if track.stream:
                    embed.description += " | üî¥ LIVESTREAM`"
                else:
                    embed.description += f" | {time_format(track.length)}`"
                embed.set_thumbnail(track.artwork_url)
            else:
                embed = LOADFAILED
        except:
            embed = LOADFAILED
            self.bot.logger.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t: {search} (ID m√°y ch·ªß: {inter.guild_id})")
        await inter.edit_original_response(embed=embed)

        if not begined:
            await player.process_next()

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def stop_legacy(self, inter: disnake.AppCmdInter):
        player: MusicPlayer = inter.author.guild.voice_client
        await player.stop()
        await player.disconnect(force=True)
        await inter.send(
            embed=Embed(
                title="‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c",
                color=0x00FFFF
            )
        )

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.slash_command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def stop(self, ctx: ApplicationCommandInteraction):
        await ctx.response.defer()
        player: MusicPlayer = ctx.author.guild.voice_client
        try:
            await player.stop()
            await player.disconnect(force=True)
        except AttributeError:
            pass
        await ctx.edit_original_response(
                embed=Embed(
                    title="‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c",
                    color=0x00FFFF
                )
            )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def pause_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        if player.paused:
            await inter.send("@silent Tr√¨nh ph√°t ƒë√£ b·ªã t·∫°m d·ª´ng r·ªìi")
            return
        await player.pause()
        await inter.send(f"@silent ƒê√£ t·∫°m d·ª´ng b√†i h√°t")

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def pause(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        if player.paused:
            await inter.edit_original_response("@silent Tr√¨nh ph√°t ƒë√£ b·ªã t·∫°m d·ª´ng r·ªìi")
            return
        await player.pause()
        await inter.edit_original_response(f"@silent ƒê√£ t·∫°m d·ª´ng b√†i h√°t")


    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="resumme", description="Ti·∫øp t·ª•c ph√°t b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def resume_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        if not player.paused:
            await inter.send("@silent Tr√¨nh ph√°t kh√¥ng b·ªã t·∫°m d·ª´ng")
            return
        await player.resume()
        await inter.send("@silent ƒê√£ ti·∫øp t·ª•c ph√°t")

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="resume", description="Ti·∫øp t·ª•c ph√°t b√†i h√°t")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def resume(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        if not player.paused:
            await inter.edit_original_response("@silent Tr√¨nh ph√°t kh√¥ng b·ªã t·∫°m d·ª´ng")
            return
        await player.resume()
        await inter.edit_original_response("@silent ƒê√£ ti·∫øp t·ª•c ph√°t")

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.command(name="next", description="Ph√°t b√†i h√°t ti·∫øp theo")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def next_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        await player.playnext()
        await inter.send(
            embed=Embed(
                title="‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo",
                color=0x00FFFF
            )
        )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @commands.slash_command(name="next", description="Ph√°t b√†i h√°t ti·∫øp theo")
    @commands.guild_only()
    @has_player()
    @check_voice()
    async def next(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        if not player.queue.next_track:
            return await inter.edit_original_response("@silent Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang trong h√†ng ƒë·ª£i")
        await player.playnext()
        await inter.edit_original_response(content="@silent ",
            embed=Embed(
                title="‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo",
                color=0x00FFFF
            )
        )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="previous", description="Ph√°t l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥")
    async def prev(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        result = await player.playprevious()
        if result:
            await inter.send(content="@silent ",
                embed=Embed(
                    title="‚èÆÔ∏è ƒê√£ quay l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥",
                    color=0x00FFFF
                )
            )
        else:
            await inter.send(content="@silent ",
                embed=Embed(
                    title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
                    color=0xFFFF00
                )
            )

    @commands.cooldown(3, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="previous", description="Ph√°t l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥")
    async def prev(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.NotiChannel = inter.channel
        result = await player.playprevious()
        if result:
            await inter.edit_original_response(content="@silent ",
                embed=Embed(
                    title="‚èÆÔ∏è ƒê√£ quay l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥",
                    color=0x00FFFF
                )
            )
        else:
            await inter.edit_original_response(content="@silent ",
                embed=Embed(
                    title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
                    color=0xFFFF00
                )
            )

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="queue", description="Hi·ªÉn th·ªã danh s√°ch ch·ªù")
    async def show_queue(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        if not player.queue.next_track:
            return await inter.edit_original_response("Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i")

        view = QueueInterface(player=player)
        embed = view.embed

        kwargs = {
            "embed": embed,
            "view": view
        }
        try:
            func = inter.followup.send
            kwargs["ephemeral"] = True
        except AttributeError:
            func = inter.send
            kwargs["ephemeral"] = True

        view.message = await func(**kwargs)

        await view.wait()

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="clear_queue", description="Xo√° danh s√°ch ch·ªù")
    async def clear_queue_legacy(self, inter: ApplicationCommandInteraction):
        player: MusicPlayer = inter.author.guild.voice_client
        player.queue.clear_queue()
        await inter.send(content="@silent ",embed=Embed(
            title="‚úÖ ƒê√£ xo√° t·∫•t c·∫£ b√†i h√°t trong danh s√°ch ch·ªù",
            color=0x00FF00
        ))

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="clear_queue", description="Xo√° danh s√°ch ch·ªù")
    async def clear_queue(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.queue.clear_queue()
        await inter.edit_original_response(content="@silent ",embed=Embed(
            title="‚úÖ ƒê√£ xo√° t·∫•t c·∫£ b√†i h√°t trong danh s√°ch ch·ªù",
            color=0x00FF00
        ))

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="247", description="Ch·∫ø ƒë·ªô ph√°t kh√¥ng d·ª´ng")
    async def non_stop(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        player: MusicPlayer = inter.author.guild.voice_client
        player.queue.always_connect = not player.queue.always_connect
        await inter.edit_original_response(content="@silent ",embed=disnake.Embed(
            title=f"‚úÖ ƒê√£ {'b·∫≠t' if player.queue.always_connect else 't·∫Øt'} ch·∫ø ƒë·ªô ph√°t kh√¥ng d·ª´ng",
            color=0x00FF00
        ))

    @commands.slash_command(name="loopmode",
    description="Ph√°t li√™n t·ª•c b√†i h√°t hi·ªán t·∫°i ho·∫∑c to√†n b·ªô danh s√°ch ph√°t",
    options=[
        disnake.Option(
            name="mode",
            description="Ch·∫ø ƒë·ªô",
            type=disnake.OptionType.integer,
            choices=[
                disnake.OptionChoice(name="T·∫Øt", value=LoopMODE.OFF),
                disnake.OptionChoice(name="B√†i h√°t hi·ªán t·∫°i", value=LoopMODE.SONG),
                disnake.OptionChoice(name="To√†n b·ªô danh s√°ch ph√°t", value=LoopMODE.PLAYLIST)
            ],
            min_value=0,
            max_length=0,
            required=True
        )
    ]
    )
    async def loop_mode(self, inter: ApplicationCommandInteraction, mode = LoopMODE.OFF):
        player: MusicPlayer = inter.author.guild.voice_client
        if mode not in (LoopMODE.OFF, LoopMODE.SONG, LoopMODE.PLAYLIST):
            await inter.send(content="@silent ",embed=disnake.Embed(
                title="‚ùå Gi√° tr·ªã nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá",
                color=0xFF0000
            ))
            return
        player.queue.loop = mode
        await inter.send(content="@silent ",embed=disnake.Embed(
            title="‚úÖ ƒê√£ thay ƒë·ªïi ch·∫ø ƒë·ªô ph√°t li√™n t·ª•c",
            color=0x00FF00
        ))

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng", aliases=["vol", "v"])
    async def volume_legacy(self, inter: ApplicationCommandInteraction, volume: int = 100):
        if not 4 < volume < 150:
            await inter.send("@silent Ch·ªçn t·ª´ **5** ƒë·∫øn **150**")
            return

        await self.volume.callback(self=self, inter=inter, volume=int(volume))

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng b√†i h√°t", options=[Option(name="volume", description="Ch·ªçn t·ª´ 5 ƒë·∫øn 150",min_value=5.0, max_value=150.0)])
    async def volume(self, inter: ApplicationCommandInteraction, volume: int = None):
        player: MusicPlayer = inter.author.guild.voice_client
        embed = Embed()

        if volume is None:

            view = VolumeInteraction(inter)

            embed.description = "**Ch·ªçn m·ª©c √¢m l∆∞·ª£ng b√™n d∆∞·ªõi**"
            await inter.send(embed=embed, view=view)
            await view.wait()
            if view.volume is None:
                return
            volume = view.volume

        elif not 4 < volume < 100:
            await inter.send("@silent Ch·ªçn t·ª´ **5** ƒë·∫øn **150**")
            return

        await player.set_volume(volume)
        await inter.edit_original_response(f"@silent ƒê√£ ƒëi·ªÉu ch·ªânh √¢m l∆∞·ª£ng th√†nh {volume}%")

    @commands.cooldown(1, 30, commands.BucketType.guild)
    @has_player()
    @check_voice()
    @commands.slash_command(name="seek", description="Tua b√†i h√°t ƒë·∫øn m·ªôt ƒëo·∫°n c·ª• th·ªÉ")
    async def seek(
            self,
            inter: ApplicationCommandInteraction,
            position: str = commands.Param(name="time", description="Th·ªùi gian ƒë·ªÉ ti·∫øn/tr·ªü l·∫°i (v√≠ d·ª•: 1:45 / 40 / 0:30)")
    ):
        player: MusicPlayer = inter.author.guild.voice_client
        if player.queue.is_playing.stream:
            raise GenericError("B·∫°n kh√¥ng th·ªÉ l√†m ƒëi·ªÅu n√†y trong m·ªôt bu·ªïi ph√°t tr·ª±c ti·∫øp")
        if not player.queue.is_playing.seekable:
            raise GenericError("B√†i h√°t n√†y kh√¥ng th·ªÉ tua")

        await inter.response.defer()

        position = position.split(" | ")[0].replace(" ", ":")

        seconds = string_to_seconds(position)

        if seconds is None:
            raise GenericError("**Gi√° tr·ªã kh√¥ng h·ª£p l·ªá!, S·ª≠ d·ª•ng gi√¢y (1 ho·∫∑c 2 ch·ªØ s·ªë) ho·∫∑c ·ªü ƒë·ªãnh d·∫°ng (ph√∫t):(gi√¢y)**")

        milliseconds = seconds * 1000

        if milliseconds < 0: milliseconds = 0

        if milliseconds > player.position:

            emoji = "‚è©"

            txt = [
                f"ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn: `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn:** `{time_format(milliseconds)}`"
            ]

        else:

            emoji = "‚è™"

            txt = [
                f" ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i: `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} ƒë∆∞a th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i:** `{time_format(milliseconds)}`"
            ]

        await player.seek(milliseconds)

        if player.paused:
            await player.resume()

        await inter.edit_original_response(content="@silent", embed=disnake.Embed(description=txt))

    @seek.autocomplete("time")
    async def seek_successtion(self, inter: disnake.Interaction, query: str):
        try:
            if not inter.author.voice:
                return
        except AttributeError:
            return

        if query:
            return [time_format(string_to_seconds(query)*1000)]

        try:
            player: MusicPlayer = inter.author.guild.voice_client
        except AttributeError:
            return

        if not player.queue.is_playing or player.queue.is_playing.stream or not player.queue.is_playing.seekable:
            return

        seeks = []

        if player.queue.is_playing.length > 90000:
            times = [int(n * 0.5 * 10) for n in range(20)]
        else:
            times = [int(n * 1 * 10) for n in range(20)]

        for p in times:
            percent = percentage(p, player.queue.is_playing.length)
            seeks.append(f'{time_format(percent)} | {p}%')

        return seeks


    @commands.Cog.listener()
    async def on_track_end(self, event: TrackEndEvent[MusicPlayer]):
        player = event.player
        reason = event.reason
        if reason == EndReason.FINISHED:
            await player.process_next()
        elif reason == EndReason.LOAD_FAILED:
            await player.NotiChannel.send(f"@silent ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i b√†i h√°t {player.queue.is_playing.title}")
            self.bot.logger.warning(f"T·∫£i b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu ·ªü m√°y ch·ªß {player.guild.id} th·∫•t b·∫°i")
            await player.playnext()

def setup(bot: ClientUser):
    bot.add_cog(Music(bot))